---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by arciesis.
--- DateTime: 2/22/24 5:17 PM
---
--local OtomoUniqueId = require("otomoUniqueId")

--- @module PalDpsMeter.otomo
local otomo = {}

-- TODO: Make a damage class with the stuff needed I think
--- @class Otomo
--- @field character_id string
--- @field slot_in_party number
--- @field unique_id OtomoUniqueId
--- @field damage_taken number
--- @field damage_inflicted number
--- @type Otomo
local Otomo = {}

--- Internal tostring
--- @return string the representation of the data
function Otomo:__tostring()
   local damage_taken = self:get_damage_taken()
   local damage_inflicted = self:get_damage_inflicted()

   if damage_taken == -1 then
      damage_taken = 0
   end
   if damage_inflicted == -1 then
      damage_inflicted = 0
   end
   local uniqueId = self:get_unique_id()
   --if not uniqueId then
   --   return (
   --         string.format(
   --               "Name: %s,\t slotIndex: %i,\t damageTaken: %i,\t damageInflicted: %i,\t %s",
   --               "emptySlot",
   --               0,
   --               0,
   --               0,
   --               0
   --         )
   --   )
   --end

   return string.format(
         "Name: %s,\t slotIndex: %i,\t damageTaken: %i,\t damageInflicted: %i,\t %s",
         self:get_character_id(),
         self:get_slot_in_party(),
         damage_taken,
         damage_inflicted,
         uniqueId:ToString()
   )
end

--- ToString method
--@return string str the representation of the data
function Otomo:ToString()
   return self:__tostring()
end

--- Getter of the class for
--@return string characterID The ID of the otomo (e.g. teh species)
function Otomo:get_character_id()
   return self.character_id
end

--- Getter
--@return number slotInParty the
function Otomo:get_slot_in_party()
   return self.slot_in_party
end

--- Getter
--@return OtomoUniqueId uid the guid of the otomo
function Otomo:get_unique_id()
   return self.unique_id
end

---@return number damageTaken the damage taken by that otomo during a fight
function Otomo:get_damage_taken()
   return self.damage_taken
end

---@return number damageInflicted the damage inflicted by that otomo during a fight
function Otomo:get_damage_inflicted()
   return self.damage_inflicted
end

-- function Otomo:setCharacterID(newCharacterID)
--     self.characterID = newCharacterID
-- end

-- function Otomo:setSlotInParty(newSlotInParty)
--     self.slotInParty = newSlotInParty
-- end

--- Setter of damageTaken
---@param new_damage_taken number the new amount of damage taken by that otomo during a fight
function Otomo:set_damage_taken(new_damage_taken)
   self.damage_taken = new_damage_taken
end

--- setter of damageInflicted
---@param new_damage_inflicted number the new amount of damage inflicted by that otomo during a fight
function Otomo:set_damage_inflicted(new_damage_inflicted)
   self.damage_inflicted = new_damage_inflicted
end

--- Return if the two otomos are the same
---@param other_otomo Otomo
---@return boolean isSame Return true if they are the sme and false otherwise
function Otomo:is_same(other_otomo)
   local other_unique_id = other_otomo:get_unique_id()
   return (self:get_unique_id():is_equal(other_unique_id))
end

--- Constructor like for the class
--- @param character_id string @characterID represent The pal name in the datatables
--- @param slot_in_party number @slotInParty represent the slot in the party (Beginning at 0)
--- @param unique_id OtomoUniqueId The Unique id of the otomo (Aka an address of its ID in the game)
--- @param damage_taken number|nil @damageTaken represent the amount of real damage it has taken during a fight
--- @param damage_inflicted number|nil @damageInflicted represent the real amount of damage the it has inflicted
function otomo.new(character_id, slot_in_party, unique_id, damage_taken, damage_inflicted)
   local self = {}
   setmetatable(self, { __index = Otomo })

   self.character_id = character_id
   self.slot_in_party = slot_in_party
   self.unique_id = unique_id
   self.damage_taken = damage_taken or -1
   self.damage_inflicted = damage_inflicted or -1

   return self
end

return otomo
